 
	ajax  
		url 	: 요정이 전송되는 url이 포함된 문자열  
		type 	: http 요청 방식 (get / post) 
		timeout : http 요청에 대한 제한 시간을 지정 (단위 : ms) 
		success : http 요청 성공시 이벤트 핸들러  
		error 	: http 요청 실패시 이벤트 핸들러  
		complete: http 요청 완료시 이벤트 핸들러  
		data	: http 요청 후 return 하는 값 
		dataType: http 요청후 return 하는 데이터의 Type을 지정 
				  (xml , html , sript , json , jsonp , text) 
		anync 	: 요청 시 동기 유무 선택 ( True(Defualt) / False) 
		dataType: return 된 데이터의 Type  
				  (xml , html , sript , json , jsonp , text) 
		cache 	: 브라우저에 의해 요청되는 페이지를 캐시 (True / False) 
		beforeSend : http 요청 전에 발생하는 이벤트 핸들러  
		global 	: 전역 함수 활성 여부 (True / False) 
		
		
		
	Get 전송 방식은 주소장에 서버에 보낸 정보가 출력됨  
		Get 요청을 할때는 Body 부분은 비어있고 헤어에 Body의 콘텐츠 타입을 명시하는 Content-type 헤더 필드를 적지않음  
		URL뒤에 쿼리 스트링(key와 value)을 붙이고 HTTP 패킷의 헤더에 포함해서 서버에 데이터를 요청 
		 
		Ex) http://localhost:3000/login?id=admin&pw=1234 
		 
		URL뒤에 ? 로부터 쿼리 스트링으로 데이터를 표현하는데 사실 중요한 값들이 노출되기 떄문에 실제 사이트에서 ID 와 PW와 같은 
		정보들에 GET방식을 이용하면 보안에 문제가 생김 
		GET방식의 경우 브라우저 마다 글자 수 제한이 있기때문에 게시판의 게시물 ,목록 조회와 같은 간단한 데이터를 요청할때 적합 , 그리고 캐싱이 가능하므로 속도가 빠름  
  
	 	* 특징 정리 
		 	- URL에 쿼리 스트링 (데이터) 를 붙여서 서버에 전송 
		 	- 데이터를 Header(헤더)에 포함하여 전송  
		 	- URL에 정보들이 그대로 노출되기 때문에 POST 방식보다 상대적으로 보안에 취약 
		 	- 캐싱이 가능 ( POST방식 보다 상대적으로 전송 속도가 빠름)  
		 	- 전송하는 데이터양에 한계가 있음 ( 브라우저마다 GET요청 길이 제한 존재 )  
		 	- 브라우저 히스토리에 기록이 남음  

   	POST 방식 특징  
 		- 데이터들을 URL뒤에 붙여서 서버로 보내는 것이 아닌 Body에 담아서 전송 
 		- 요청 헤어의 Content-Type에 콘텐츠 타입을 명시  
 		- 데이터들이 URL에 노충되지 않기 때문에 GET방식보다 상대적으로 보안적  
 		- 데이터들을 Body에 담기 때문에 서버로 보내는 데이터의 양이 제한없음 
 		- URL에 데이터가 노충되지 않으므로 캐싱 불가 
 		- 클라이언트에서 인코딩, 서버에서 디코딩 
 		- 요청받는 시간제한이 있음 
 		- 브라우저 히스토리에 기록이 남지 않음 
	
		파라미터 : 매개변수 
	 
     스크립트의 3가지 형식 --> 
       
        
	 // 스크립틀릿	: 변수나 실행문 정의 ( 메소드 정의 불가 ) * 지역변수  <% %>
        표현식 : 결과 출력 (메소드 호출가능) <%= %> (전역 변수) 
        선언부 : 메소드, 변수 정의 <%! %>
        
        
	 //선언부 (메서드 선언)  : 변수나 메소드 정의 * 전역변수 (인스턴스 변수)
		public int add(int a , int b){
			return a + b;
		}
		public int add2(int a , int b){
			return a + b;
		}
		  
         
          	 
		내장 객체의 특징  
		  - 컨테이너가 미리 선언해놓은 참조 변수를 이용해 사용 
		  - 별도의 객체 생성 없이 각 내장 객체의 메서드를 사용 가능  
		  - JSP 문서 안에 에서만 사용할 수 있다. 
	 	  - 스크립틀릿에서는 즉시 사용하는 건 불가능하고, 매개변수로 전달받아 사용할수 있다. 

	내장 객체의 종류 (가장 기본적인 5가지)   
		- request 		: 클라이언트가 전송한 요청 정보를 저장 (가장 많이 사용 ) 
							클라이언트의 요청을 받거나 웹 브라우저에 대한 정보 혹은 요청 헤더에 대한 정보를 읽을때 사용
							주요 기능 		 
							- 클라이언트와 서버에 대한 정보 읽기 
							- 클라이언트가 전송한 요청 매개변수에 대한 정보 읽기 
							- 요청 헤더 및 쿠키 정보 읽기  
							
							
							 
		- response 		: 클라이언트의 요청에 대한 응답 정보를 저장 
							요청에 대한 응답을 웹브라우저로 보낼 떄 사용 페이지 이동이나 응답 헤더를 추가할 떄도 사용 
							-요청에 대한 응답을 웹 브라우저로 보내주는 역할  
							주요 기능 	- 페이지 이동을 위한 리다이렉트  
								    - HTTP 헤더에 응답 헤더 추가  
							기능이 더있지만 JSP에서는 거의 사용하지 않음  
							 
		- out 			: JSP 페이지에 출력할 내용을 담는 출력 스트림  
							변수 등 값을 웹브라우저에 출력할떄 사용 
	 
		- application  	: 웹 에플리케이션 관련 컨텍스트 정보를 저장 
	 						웹 애플리케이션을 구성하는 모든 JSP에서 접근 가능한 객체로, 웹 애플리케이션에 대한 설정값을 저장할 때 주로 사용
	 						
		- exception   	: 예외가 발생한 경우에 사용  
							- 404(Not Found) : 경로명이나 파일명이 제대로 입력되었는지 확인 
							- 405(Method Not Allowed) : 메서드가 적절히 오버라이딩 되었는지 확인
							- 500(Internal Server Error) : 개발중인 코드를 전반적으로 확인    	
	
	DTO( Data Transfer Object ) 
		- 데이터를 저장하거나 전송하는 데 쓰이는 객체로 다른 로직 없이 순수하게 데이터만을 담고 있다. 
		- 값 객체라고도 한다 
		
		* 자바 빈즈 규약 
			1. 기본 패키지 이외의 패키지에 있을 것
			2. 멤버 변수의 접근 지정자는 private 일 것
			3. 기본 생성자가 있어야 할 것
			4. 멤버 변수에 접근할 수 있는 게터/세터 메소드가 있어야 할 것
			5. 게터/세터는 public으로 선언 할 것 
 

	내장 객체 영역 
	application > session > request > page 
	
	page 		: 동일한 페이지에서만 데이터 공유, 다른 페이지로 이동시 데이터 소멸 
					- 기본적으로 클라이언트의 요청을 처리하는데 관여하는 JSP 페이지마다 하나씩 생성 
		
	request 	: 하나의 요청에 의해 호출된 페이지와 그 페이지에서 포워드된 페이지까지 데이터 공유 그 외 다른 페이지 이동시 데이터 소멸
					- 클라이언트가 요청 할때마다 새로운 request 객체가 생성, 같은 요청을 처리하는 데 사용되는 모든 JSP페이지가 데이터를 공유 
		
	session 	: 웹 브라우저가 종료되기 전까지 데이터 공유 웹 브라우저 종료시 데이터 소멸 
					- 클라이언트가 웹 브라우저를 최초로 열고난 후 닫을 때까지 요청되는 모든 페이지는 session영역 , 그러므로 데이터를 공유할 수 있음 
					- 세션이란 클라이언트가 서버에 접속해 있는 상태 혹은 단위를 말하는 것으로 주로 회원인증 후 로그인 상태를 유지하는 처리에 사용 
					 ( 포털 사이트에서 웹 브라우저를 닫으면 자동으로 로그아웃 되는 이유가 바로 session 객체의 특성 )
		 
	application	: 서버가 종료되기 전까지 데이터 공유 서버가 종료시 데이터 소멸 , 즉 서버가 종료되지 않으면 평생 쓸수있음 
					- 단 하나의 application 객체만 생성하고 ,클라이언트가 요청하는 모든 페이지가 application 객체를 공유 
					- application 영역에 저장된 데이터는 서버가 종료되지 않으면 삭제되지 않음 
						

	영역 설정 - 영역에 저장 시 모든 타입은 자동으로 Object로 형변환 데이터를 꺼낼때 형변환 필요 
		pageContext	/ request  / session  / application 					변수 	 =	값 
														.setAttribute(String name , Object Value) 
															- page 영역에 데이터 저장
															- 값의 타입은 Object이기 떄문에 모든 타입 저장 가능 
															
														.getAttribute(String name)	-데이터 추출 
														
														.removeAttribute  - 데이터 삭제 
		** request 방식은 페이지를 포워드 방식으로 넘겨야 데이터 공유 
			- 포워드 방식 : request.getRequestDispatchar("포워드할 파일 경로").forward(request , response);
				
	쿠키 - 클라이언트의 상태 정보를 유지 ** 상태 정보를 { key : Value } 형태로 저장, 다음 요청시 저장된 쿠키를 함께 전송 
		웹 서버는 쿠키로부터 필요한 데이터를 읽어올수 있음 
		
	쿠키 표준 	- 3000개까지 만들수있음 
			- 쿠키 하나의 크기는 4096byte = 1.2MB
			- 하나의 호스트나 도메인에서 최대 50개까지 만들수 있음 
	쿠키 동작 메커니즘 
	 	1. 클라이언트가 서버로 요청 ( 쿠키 생성되지 않음 서버는 쿠키를 읽을 수 없음 )
	 	2. 서버가 쿠키를 생성해 HTTP 응답 헤더에 실어 클라이언트로 보냄
	 	3. 클라이언트는 쿠키를 저장할지 버릴지 선택 가능 
	 	4. 만약 저장했다면 다음번에 같은 서버로 요청을 하게되면 HTTP 요청 헤더에 쿠키를 실어 보냄 
	 	5. 서버는 클라이언트로부터 받은 쿠키정보를 읽어 클라이언트에게 필요한 작업을 수행  
	 	
	 	
	 쿠키 생성 
	 	Cookie c = new Cookie( "key" , "value");
	 	c.setPath("쿠키가 저장될 경로");
	 	c.setMaxAge(쿠키가 저장될 기간(시간) 설정)
	 	response.addCookie(c); 쿠키를 HTTP응답헤더에 실어 서버로 보냄 
	 	
	 	
	 쿠키 읽어오기  
	 	Cookie[] cookies = request.getCookies();  // 헤더에서 모든 쿠키의 정보를 배열로 받아옴 
	 	if(cookies != null){					  // 쿠키의 배열이 null이 아니라면 
	 		for(String c : cookies){			  // 향상된 for문으로 모든 쿠키의 정보를 받음 
	 			String cName = 	c.getName(); 	// 쿠키의 이름  (Key)
	 			String cValue = c.getValue(); 	// 쿠키의 값  (Value)
	 			if(cookieName.equals("원하는 쿠키의 이름"){
	 				원하는 쿠키로 실행문 작성 
	 			}
	 		}
	 	}
	 	
	 쿠키 요약 
	 	쿠키는 클라이언트의 상태 정보를 클라이언트에 저장하는 기술 
	 	쿠키는 생성자를 통해서만 생성할 수 있음 . 생성 후 쿠키 값은 변경할 수 있으나 쿠키명은 변경 불가
	 	setPath()메소드로 적용할 경로를 설정 
	 	setMaxAge() 메소드로 쿠키의 유지 기간을 설정
	 	response 내장 객체의 addCookie()메소드로 클라이언트에 쿠키를 저장
	 	쿠키는 생성 직후 바로 사용 불가 클라이언트가 재요청을 했을 때부터 사용 가능 





	데이터 베이스 연결 JDBC 공부 
		데이터 베이스를 연결하기 위해서는 try catch 구문으로 묶어줘야함 
		사용한 데이터 베이스는 반드시 닫아줘야함 ( 서버의 과부하 방지 , 리소스 낭비 방지 )
		
	데이터 베이스와 연결하는 기본 방법 : 해킹시 테이블에 접근 가능 (ID PASSWORD 노출)  
		Connection conn = null;
		try{
			String url = "jdbc:oracle:thin:@localhost:1521:orcl"; 
			Class.forName("oracle.jdbc.driver.OracleDriver"); // 지정 경로에 Class가 있는지 확인 
			conn = DriverManager.getConnection(url, "musthave" , "1234");// (DB 주소 , DB계정  , DB비빌번호)
			
			conn.close(); // 서버의 리소스 낭비를 방지하기위해 반드시 연결읠 해제 해야함 
		}catch(Exception e){
			e.printStackTrace();
		}
		out.print(conn +"<br/>") ;
		
		
		
		
	DBConnect.class 
		
		자바 클래스에서 SQL 사용시 반드시 import  
			import java.beans.Statement;
			import java.sql.*;
			import javax.servlet.ServletContext;
			
			public class JDBConnect {
			
			기본적으로 사용하는 4가지  
				public Connection conn = null;  	// 데이터 베이스와 연결을 담당
				public Statement stmt ;				// 인파라미터가 없는 정적 쿼리문을 실행할때 사용 
				public PreparedStatement psmt;		// 인파라미터가 있는 동적 쿼리문을 실행할때 사용 
				public ResultSet rs;				// SELECT 쿼리문의 결과를 저장할때 사용 
					
					** 	ResultSet rs = psmt.executeQuery() : sql문이 select문일때 사용 ( 단순 데이터 조회 )  
						ResultSet rs = psmt.executeUpdate() : sql문이 기존의 데이터를 변경하는 경우 사용 (삭제 ,변경 , 수정 등)
				
				
				// 직접 값을 초기화해서 연결 ( 기본 생성자 호출로 DB연결 )  
				public JDBConnect()	{
					String url = "jdbc:oracle:thin:@localhost:1521:orcl"; 
					try{
						Class.forName("oracle.jdbc.driver.OracleDriver"); // Oracle Class가 있는지 확인 
						conn = DriverManager.getConnection(url, "scott" , "tiger");// (DB 주소 , DB계정  , DB비빌번호)
					}catch(Exception e){
						e.printStackTrace();
					}
				}
				
				// 매개변수를 받아 연결
				public JDBConnect(String driver , String url , String id , String pwd)	{
					try {
						Class.forName(driver);
						conn = DriverManager.getConnection(url , id , pwd);
						System.out.println("DB 연결 성공 (인수 생성자)");
					}catch(Exception e) {
						e.printStackTrace();
					}
				}
				
				// xml 파일에 초기화 매개변수를 사용해 그 값을 받아와 DB연결 ( 테이블의 정보를 확인할수 없음 위의 방식보다 해킹의 위험이 적음 ) 
				public JDBConnect(ServletContext application) {
					try {
						String driver = application.getInitParameter("OracleDriver");
						Class.forName(driver);
						String url = application.getInitParameter("OracleUrl");
						String id = application.getInitParameter("OracleId");
						String pwd =application.getInitParameter("OraclePwd");
						
						System.out.println("DB 연결 성공 (. xml 초기화 방식)");
						conn = DriverManager.getConnection(url,id,pwd);
					}catch(Exception e) {
						e.printStackTrace();
					}
				}
				
				public void close() {
					try { // 닫아줘야 하는 순서  (rs 먼저 , conn 제일 마지막 ) 
						if(rs != null) 		{conn.close();}
						if(stmt != null) 	{conn.close();}
						if(psmt != null) 	{conn.close();}
						if(conn != null) 	{conn.close();}
					}catch(Exception e) {
						e.printStackTrace();
					}
				}
			}
			
			
	JDBC에서 CRUD 
	
		데이터 생성 
			JDBConnect jdbc = new JDBConnect();
		 
			//DB에 하드코딩으로 데이터 삽입 
			String id = "test4";
			String pass = "3333";
			String name = "테스트4회원";
			
		 	/* ? : 인파라미터 ( 나중에 입력 ) 
			setString(인덱스 , 값 ) 을이용해 인파라미터에 값을 삽입
			setString의 인덱스는 1번 부터 시작하고 인덱스 1번 : 인파라미터 1번으로 연결되며 데이터 저장  */
			
			String sql = "INSERT INTO member VALUES (?,?,?,sysdate)";
			PreparedStatement psmt = jdbc.conn.prepareStatement(sql);
			psmt.setString(1,id);
			psmt.setString(2, pass);
			psmt.setString(3, name);
			
			int inResult = psmt.executeUpdate(); // 쿼리 문 실행  반환 타입은 int형 실행의결과의 개수를 리턴 
			out.println(inResult + "행이 입력되었습니다. <br/>"); 
			
			
			
		데이터 읽기 
			// DB 데이터 읽기 
			String selectSQL = "SELECT id , pass , name , regidate FROM member";
			Statement stmt = jdbc.conn.createStatement();
			
			ResultSet rs = stmt.executeQuery(selectSQL); // 테이블을 가르킴  
			
			while(rs.next()){  // 레코드 단위로 한칸씩 이동  .next() 다음 값이 있으면 true 없으면 false 리턴 
				String id1 = rs.getString(1);  //getString(컬럼의 인덱스 값 or "컬럼명")
				String pw1 = rs.getString(2);
				String name1 = rs.getString(3);
				// String name2 = rs.getString("name");
				
				java.sql.Date regidate = rs.getDate("regidate");
				
				out.println(String.format("%s / %s / %s / %s " , id1 , pw1 , name1 , regidate) + "<br/><hr/>");
			}
			
			닫는 순서 
			ResultSet (rs) > PreparedStatement (psmt) <=> Statement (stmt) > Connection : (con) 
			
			
		데이터 수정 
			String updateSQL = "update emp01 set deptno = ? where deptno = ?";
			PreparedStatement psmt2 = scott.conn.prepareStatement(updateSQL);
			psmt2.setInt(1, 10);
			psmt2.setInt(2, 30);
			psmt2.executeUpdate(); 
	
		데이터 삭제 
			String deleteSQL = "delete from emp01 where deptno = ?";
			PreparedStatement psmt3 = scott.conn.prepareStatement(deleteSQL);
			psmt3.setInt(1, 20);
			psmt3.executeUpdate(); 
				
	


	커넥션 풀 ( SQL의 데이터( ID , PASSWORD )가 보이지 않음 보안)  JNDI 공부 
	
		커넥션풀을 사용하기 위한 설정 
			server.xml 	<Resource auth="Container"
			              driverClassName="oracle.jdbc.OracleDriver"
			              type="javax.sql.DataSource" 
			              initialSize="0"
			              minIdle="5"
			              maxTotal="20"
			              maxIdle="20"
			              maxWaitMillis="5000"
			              아래의 타입만 신경써서 작성 
			              url="jdbc:oracle:thin:@localhost:1521:xe"
			              name="dbcp_myoracle"   // name 속성값으로 값에 접근 
			              username="musthave" 
			              password="1234" />
		              
		   context.xml	<ResourceLink global="dbcp_myoracle" name="dbcp_myoracle" 
		              		type="javax.sql.DataSource"/>


	ConnectionPool.class  
	
		import java.sql.*;
		
		import javax.naming.Context;
		import javax.naming.InitialContext;
		import javax.sql.DataSource;
		
		
		public class DBConnPool {
			public Connection con;
			
			public DBConnPool() {
				try {
					Context initCtx = new InitialContext();
					Context ctx = (Context) initCtx.lookup("java:comp/env");
					
					DataSource source = (DataSource)ctx.lookup("dbcp_myoracle"); // server.xml에서 정의한 name 속성 값을 지정  
					con = source.getConnection();
					System.out.println("ctx : " + ctx +"\n"+"connection : "+ con +" \nSource : " + source );
					} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}
			}
			
			
			public void close()	{
				try {
					if(con != null) {
						con.close();
					}
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}
			}
		}
		
	Session : 웹 브라우저를 통해 서버에 접속한 후 용무를 처리하고 웹브라우저를 닫아 서버와 접속을 종료하는 하나의 단위 
		유지 시간 설정 
			서버의 web.xml 파일에서 session-timeout 시간 변경  단위는 분단위 
			JSP파일에서 session.setMaxInactiveInterval(초단위) ;
		세션 설정 값 확인
			유지 시간 : session.getMaxInactiveInterval();
			아이디 : session.getId();
			최초 요청 시간 : creationTimeStr;
			마지막 요청 시간 : lastTimeStr
			
		세션 삭제 
			자동으로 생성된 쿠키를 삭제함으로써 세션 삭제 가능 
		
		DAO : 데이터 베이스의 데이터에 접근하기 위한 객체 보통 JDBC를 통해 구현하고 하나의 테이블에서 수행할 수 있는 CRUD를 전담   
		DTO : 단순 데이터를 교환하기위해 생성하는 객체 
		
		
	액션 태그 : JSP의 표준 태그로 페이지 사이에서 이동을 제어하거나 자바빈을 생성할 떄 주로 사용 
		특징 	1. XML문법을 따른다. 
			2. 반드시 종료 태그를 사용해야한다.
			3. 액션 태그 사이에 주석을 사용하면 에러 발생
			4. 액션 태그에 속성값을 부여할때는 표현식을 사용 
			
			
		<jsp:include> - 외부 파일을 현재 파일에 포함  
		<jsp:forward> - 다른 페이지로 요청을 넘김 
		<jsp:useBean> <jsp:setProperty> <jsp:getProperty> 
			- 자바빈즈를 생성하고 값을 설정/추출 할때 사용
		<jsp: param>  - 다른 페이지로 매개변수를 전달. include 와 forward 액션태그와 함께 사용 
		
		
		include 지시어와 액션태그의 차이점 
			지시어 : 페이지를 원본 그대로 현재 페이지에 먼저 포함시킨후 컴파일 동일한 페이지로 인식함 
			 		즉, 같은 변수를 공유할수 있고 page영역에서 데이터가 공유됨 
			액션태그 : 포함시킬 페이지로 요청의 흐름이 이동되어 컴파일을 진행 그리고 컴파일된 결과물을 현재 페이지에 삽입 
					즉, 변수 또한 같이 사용할 수 없고 page영역 또한 공유되지 않음 컴파일된 JSP코드는 모두 단순한 HTML 형태로 변환 
					
					
		forward : 
			기존 방식 : request.getRequestDispatcher("포워드할 파일").forward(request, response);
			액션 태그 : <jsp:forward page="포워드할 파일"></jsp:forward>
			
			
		<jsp:useBean> : 자바빈즈를 생성하거나 설정할 떄 사용 
			사용법 : <jsp:useBean id="자바빈즈 이름" class ="사용할 패키지와 클래스명" scope="저장될 영역"/>
	   			id : 자바빈즈 객체의 이름을 지정 같은 id로 이미 생성된 객체가 있다면 해당 객체를 사용하고 아직 없다면 새로 생성
	   			class : 사용하려는 자바 빈즈 객체의 실제 패키지명과 클래스명을 지정 자바에서는 다른 패키지에 있는 클래스를 사용하기 위해선
	   					import를 사용해야하는데 이와 같은 역할 
	   			scope : 자바빈즈가 저장될 내장 객체 영역을 지정. 생략한다면 기본값인 page 영역이 지정됨 
	   					액션 태그로 생성한 자바빈즈는 4가지 영역중 한곳에 저장
	   					
	   	<jsp:setProperty> : 변수의 값을 설정 
	   		사용법 : <jsp:setProperty name="자바빈즈 이름" property="속성명(맴버 변수)" value="설정할 값"/>
	   			name : useBean 에서 설정한 id 속성의 값을 입력 
	   			property 자바빈즈의 맴버변수명을 지정 // 
	   				이름을 명시하는 대신 property="*" 라고 입력하면 form 의 하위요소와 일치하는 자바빈즈의 모든 속성에 사용자가 전송한
	   				값이 설정 이떄는 value 속성 생략 가능
	   			value : 맴버 변수에 설정할 값을 지정 
	   			
	   <jsp:getProperty> : 값을 추출 
	   		사용법 : <jsp:getProperty name ="자바빈즈 이름" property ="속성 명(맴버 변수)"/>  
	   		
	   		
	   		
	   표현 언어(EL) : 변수의 값을 출력할떄 사용하는 스크립트언어 
		   표현식과 비슷하지만 역할이 조금 다름 
		   표현 언어는 4가지 영역에 저장된 값을 출력할때 사용 , 사용법이 간결하며 예외와 형변환에 관대 
		   	표현언어의 기능 
		   		- JSP내장 객체의 영역에 담긴 속을을 사용할수 있다. 
		   		- 산술, 비교 ,논리 연산이 가능
		   		- 자바 클래스에 정의된 메서드를 호출할수 있다. 
		   		- 표현언어만의 객체를 통해 JSP와 동일한 기능을 수행 가능 		
	   		
	   		기본 사용법 $ { 속성 } ** 영역에 저장되어있는 속성을 의미 ( 저장되어있지 않은 속성은 쓸수없음 ) 
	   			- 스크립틀릿 , 표현식 , 선언부에는 사용할수 없음 * 오류 
	   		
	   		객체 표현 방식 : . 이나 [ ] 사용 
	   			- ${ param.name } or ${ param["name" or 'name'] }
	   				* 속성명에 특수 기호나 한글이 포함되어있을 경우에는 대괄호만 사용할수 있음  
	   				
	   				
	   		${ pageScope.ScopeValue } 		: pageContext 내장 객체와 같이 page 영역에 저장된 속성값을 읽어옴 
			${ requestScope.ScopeValue }	: request 내장 객체와 같이 request 영역에 저장된 속성값을 읽어옴 
			${ sessionScope.ScopeValue }		: session 내장 객체와 같이 session 영역에 저장된 속성값을 읽어옴 
			${ applicationScope.ScopeValue }: application 내장 객체와 같이 application 영역에 저장된 속성값을 읽어옴 
			
			* 속성 이름이 같아도 저장된 영역이 다르기때문에 괜찮음 EL을 사용할떄 영역을 지정하지 않고 사용하게 되면 가장 작은 범위에서부터 속성 이름을 검색 
					! 영역 범위는 기존과 같음 
	   		
	   		EL에서 폼값 받기 
	   			param.매개변수명 : 매개변수의 값을 받아옴 
	   			paramValues.매개변수명 : 요청 매개변수의 값을 * 문자열 배열 * 형태로 받아옴 ( 주로 다중 선택이 가능한 checkbox를 통해 전달된 데이터를 받을때 사용 ) 
	   				배열형태이기 떄문에 인덱스 번호 사용 가능 
	   		
	   		객체 전달 받기 
	   			전달하는 방식은 기존과 동일하게 보냄 / 영역 설정 후 전송하고자 하는 페이지로 전달 
	   			객체 표현 방식을 사용해 전달된 값을 읽을 수 있다. 
	   
	   
	   
	   
	   서블릿 (Servlet) : 서버에서 클라이언트의 요청을 받아 처리한 후 응답 하는 역할 
	   	특징 	- 클라이언트의 요청에 대해 동적으로 작동하는 웹 애플리케이션 컴포넌트
	   		- MVC모델에서 컨트롤러 역할 
	   		- 모든 메서드는 스레드로 동작
	   		- javax.servlet.http 패키지의 HttpServlet 클래스를 상속받음 
	   		
	   		
	   	서블릿 컨테이너 
		   		1. HTTP 요청 
		   		2. 요청 전달 
		   		3. 서블릿로드
		   		4. 초기화 
		   		5. 요청 처리
		   		6. HTTP 응답 
	   	서블릿의 동작 방식 
	   		1. 클라이언트의 요청을 받아서 2. 분석후 요청을 처리할 서블릿을 찾는다 3. 서블릿을 통해 비즈니스 서비스 로직을 호출 
	   		4. 모델로부터 그 결과 값을 받아서 5. request나 session영역에 저장한 후 결과값을 출력할 적절한 뷰를 선택 
	   		6. 최종적으로 선택된 뷰에 결과값을 출력한 후 요청한 클라이언테에 응답 
	   		
	   	서블릿 작성 규칙 
	   		1. 기본 적으로 javax.servlet.http.HttpServlet패키지를 임포트 
	   		2. 서블릿 클래스는 반드시 public으로 선언해야하고 HttpServlet을 상속받아야한다.
	   		3. 사용자의 요청을 처리하기 위해 doGet메서드나 doPost메서드를 반드시 오버라이딩 해야한다.
	   		4. doGet() 또는 doPost()메서드는 ServletException과 IOException 예외를 던지도록 (throws) 선언 
	   		5. doGet() 또는 doPost()메서드를 호출할 때의 매개변수는 HttpServletRequest와 HttpServletResponse을 사용 
	   		
	   		
	   	서블릿 작성
	   		- 클라이언트의 요청을 전달할 '요청명'을 결정하는 일부터 시작 JSP에서는 클라이언트의 요청을 JSP가 직접 받아 처리하지만 서블릿은 요청명을 기준으로
	   		이를 처리할 서블릿을 선택 요청명과 서블릿을 연결해주는 작업을 매핑(mapping)이라고 하며 2가지 방식이있다.
	   		
	   		1. web.xml에 기술 2. @WebServlet 애너테이션을 사용하여 코드에 직접 명시 

		1. web.xml 
		 <servlet> : 서블릿 등록 
			  	<servlet-name>서블릿 명</servlet-name>
			  	<servlet-class>패키지를 포함한 서블릿 클래스명 </servlet-class>
		  </servlet> 
		  <servlet-mapping> : 서블릿과 요청명 매핑 
			  	<servlet-name>서블릿명</servlet-name>
			  	<url-pattern>클라이언트 요청 URL</url-pattern>
		  </servlet-mapping>  		
	   		
	   		
			<servlet> 			: 서블릿 클래스 등록 
			<servlet-name>		: 서블릿을 참조할 떄 사용할 이름 
			<servlet-class> 	: 패키지를 포함한 서블릿 클래스명 
			<servlet-mapping> 	: 매핑 정보 등록 
			<servlet-name>		: servlet에서 사용한 name과 동일한 이름을 입력 
			<url-pattern>		: 요청명으로 사용할 경로를 입력 컨텍스트 루트를 제외한 / 로 시작하는 경로를 사용해야함
	   		* 	http://localhost:8081/ BoardModel2/		 list.do
	   				호스트명				컨텍스트루트명 			요청명
	   				
	   				
	   	2.   @WebServlet 애너테이션
	   		  @WebServlet("요청명으로 사용할 경로를 입력 컨텍스트 루트를 제외한 / 로 시작하는 경로를 사용해야함")
	   	
	   오류 정리 
	   DB 연결시 console 에 ClassNotFound가 떴다면 WebContent > WEB-INF > lib 에 JDBC연동을 위한 jar 파일이 있는 지 확인 
	 	
			
					
				